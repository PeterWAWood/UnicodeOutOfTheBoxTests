Schulz:UnicodeOutOfTheBoxTests peter$ ruby ruby/UnicodeTests.rb
Loaded suite ruby/UnicodeTests
Started
F
===============================================================================
Failure:
test_unicode_1(TestSource)
ruby/UnicodeTests.rb:8:in `test_unicode_1'
      5: class TestSource < Test::Unit::TestCase
      6: 
      7:   def test_unicode_1
  =>  8:     assert_equal("c\xCC\xA7", "\xC3\xA7")  
      9:   end
     10:   
     11:   def test_unicode_2
<"ç"> expected but was
<"ç">

diff:
? ç
? ç  
===============================================================================
F
===============================================================================
Failure:
test_unicode_10(TestSource)
ruby/UnicodeTests.rb:48:in `test_unicode_10'
     45:   
     46:   def test_unicode_10
     47:     # as far as I can tell there is no way to set the locale in Ruby
  => 48:     assert_equal("\xC4\xB0", 'i'.upcase)
     49:   end
     50:   
     51:   def test_unicode_11
<"İ"> expected but was
<"I">

diff:
? İ
? I
===============================================================================
F
===============================================================================
Failure:
test_unicode_11(TestSource)
ruby/UnicodeTests.rb:52:in `test_unicode_11'
     49:   end
     50:   
     51:   def test_unicode_11
  => 52:     assert_equal("\xC4\xB1", 'I'.downcase)
     53:   end
     54:   
     55:   def test_unicode_12
<"ı"> expected but was
<"i">

diff:
? ı
? i 
===============================================================================
F
===============================================================================
Failure:
test_unicode_12(TestSource)
ruby/UnicodeTests.rb:56:in `test_unicode_12'
     53:   end
     54:   
     55:   def test_unicode_12
  => 56:     assert_equal('STRASSE', "stra\xC3\x9Fe".upcase)
     57:   end
     58:   
     59: end
<"STRASSE"> expected but was
<"STRAßE">

diff:
? STRASSE
?     ß 
===============================================================================
.F
===============================================================================
Failure:
test_unicode_3(TestSource)
ruby/UnicodeTests.rb:16:in `test_unicode_3'
     13:   end
     14:   
     15:   def test_unicode_3
  => 16:     assert_equal(4, "noe\xCC\x88l".length)
     17:   end
     18:   
     19:   def test_unicode_4
<4> expected but was
<5>

diff:
? 4
? 5
===============================================================================
F
===============================================================================
Failure:
test_unicode_4(TestSource)
ruby/UnicodeTests.rb:20:in `test_unicode_4'
     17:   end
     18:   
     19:   def test_unicode_4
  => 20:     assert_equal("le\xCC\x88on", "noe\xCC\x88l".reverse)
     21:   end
     22:   
     23:   def test_unicode_5
<"lëon"> expected but was
<"l̈eon">

diff:
? l̈ëon
===============================================================================
F
===============================================================================
Failure:
test_unicode_5(TestSource)
ruby/UnicodeTests.rb:24:in `test_unicode_5'
     21:   end
     22:   
     23:   def test_unicode_5
  => 24:     assert_equal("noe\xCC\x88", "noe\xCC\x88l".slice(0..2))
     25:   end
     26:   
     27:   def test_unicode_6
<"noë"> expected but was
<"noe">

diff:
? noë
===============================================================================
F
===============================================================================
Failure:
test_unicode_6(TestSource)
ruby/UnicodeTests.rb:28:in `test_unicode_6'
     25:   end
     26:   
     27:   def test_unicode_6
  => 28:     assert_equal('BAFFLE', "ba\xEF\xAC\x84e".upcase)
     29:   end
     30:   
     31:   def test_unicode_7
<"BAFFLE"> expected but was
<"BAﬄE">

diff:
? BAFFLE
?   ﬄ   
===============================================================================
F
===============================================================================
Failure:
test_unicode_7(TestSource)
ruby/UnicodeTests.rb:32:in `test_unicode_7'
     29:   end
     30:   
     31:   def test_unicode_7
  => 32:     assert_equal("CANT\xC3\x99", "cant\xC3\xB9".upcase)
     33:   end
     34:   
     35:   def test_unicode_8
<"CANTÙ"> expected but was
<"CANTù">

diff:
? CANTÙ 
?     ù
===============================================================================
..

Finished in 0.038828 seconds.

12 tests, 12 assertions, 9 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications
25% passed

309.06 tests/s, 309.06 assertions/s