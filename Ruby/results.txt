peter$ ruby ruby/UnicodeTests.rb
Loaded suite ruby/UnicodeTests
Started
F
===============================================================================
Failure:
test_unicode_01(TestSource)
ruby/UnicodeTests.rb:8:in `test_unicode_01'
      5: class TestSource < Test::Unit::TestCase
      6: 
      7:   def test_unicode_01
  =>  8:     assert_equal("c\xCC\xA7", "\xC3\xA7")  
      9:   end
     10:   
     11:   def test_unicode_02
<"ç"> expected but was
<"ç">

diff:
? ç
? ç  
===============================================================================
.F
===============================================================================
Failure:
test_unicode_03(TestSource)
ruby/UnicodeTests.rb:16:in `test_unicode_03'
     13:   end
     14:   
     15:   def test_unicode_03
  => 16:     assert_equal(4, "noe\xCC\x88l".length)
     17:   end
     18:   
     19:   def test_unicode_04
<4> expected but was
<5>

diff:
? 4
? 5
===============================================================================
F
===============================================================================
Failure:
test_unicode_04(TestSource)
ruby/UnicodeTests.rb:20:in `test_unicode_04'
     17:   end
     18:   
     19:   def test_unicode_04
  => 20:     assert_equal("le\xCC\x88on", "noe\xCC\x88l".reverse)
     21:   end
     22:   
     23:   def test_unicode_05
<"lëon"> expected but was
<"l̈eon">

diff:
? l̈ëon
===============================================================================
F
===============================================================================
Failure:
test_unicode_05(TestSource)
ruby/UnicodeTests.rb:24:in `test_unicode_05'
     21:   end
     22:   
     23:   def test_unicode_05
  => 24:     assert_equal("noe\xCC\x88", "noe\xCC\x88l".slice(0..2))
     25:   end
     26:   
     27:   def test_unicode_06
<"noë"> expected but was
<"noe">

diff:
? noë
===============================================================================
F
===============================================================================
Failure:
test_unicode_06(TestSource)
ruby/UnicodeTests.rb:28:in `test_unicode_06'
     25:   end
     26:   
     27:   def test_unicode_06
  => 28:     assert_equal('BAFFLE', "ba\xEF\xAC\x84e".upcase)
     29:   end
     30:   
     31:   def test_unicode_07
<"BAFFLE"> expected but was
<"BAﬄE">

diff:
? BAFFLE
?   ﬄ   
===============================================================================
F
===============================================================================
Failure:
test_unicode_07(TestSource)
ruby/UnicodeTests.rb:32:in `test_unicode_07'
     29:   end
     30:   
     31:   def test_unicode_07
  => 32:     assert_equal("CANT\xC3\x99", "cant\xC3\xB9".upcase)
     33:   end
     34:   
     35:   def test_unicode_08
<"CANTÙ"> expected but was
<"CANTù">

diff:
? CANTÙ 
?     ù
===============================================================================
...F
===============================================================================
Failure:
test_unicode_11(TestSource)
ruby/UnicodeTests.rb:52:in `test_unicode_11'
     49:   
     50:   def test_unicode_11
     51:     # as far as I can tell there is no way to set the locale in Ruby
  => 52:     assert_equal("\xC4\xB0", 'i'.upcase)
     53:   end
     54:   
     55:   def test_unicode_12
<"İ"> expected but was
<"I">

diff:
? İ
? I
===============================================================================
F
===============================================================================
Failure:
test_unicode_12(TestSource)
ruby/UnicodeTests.rb:56:in `test_unicode_12'
     53:   end
     54:   
     55:   def test_unicode_12
  => 56:     assert_equal("\xC4\xB1", 'I'.downcase)
     57:   end
     58:   
     59:   def test_unicode_13
<"ı"> expected but was
<"i">

diff:
? ı
? i 
===============================================================================
F
===============================================================================
Failure:
test_unicode_13(TestSource)
ruby/UnicodeTests.rb:60:in `test_unicode_13'
     57:   end
     58:   
     59:   def test_unicode_13
  => 60:     assert_equal('STRASSE', "stra\xC3\x9Fe".upcase)
     61:   end
     62:   
     63:   def test_unicode_14
<"STRASSE"> expected but was
<"STRAßE">

diff:
? STRASSE
?     ß 
===============================================================================
F
===============================================================================
Failure:
test_unicode_14(TestSource)
ruby/UnicodeTests.rb:64:in `test_unicode_14'
     61:   end
     62:   
     63:   def test_unicode_14
  => 64:     assert_equal(1, "\xE3\x83\x88\xE3\x82\x99".length)
     65:   end
     66:   
     67:   def test_unicode_15
<1> expected but was
<2>

diff:
? 1
? 2
===============================================================================
F
===============================================================================
Failure:
test_unicode_15(TestSource)
ruby/UnicodeTests.rb:68:in `test_unicode_15'
     65:   end
     66:   
     67:   def test_unicode_15
  => 68:     assert_equal(3,"e\xCC\x88\xF0\x9D\x84\x9E\xE3\x83\x88\xE3\x82\x99".length)
     69:   end
     70:   
     71:   def test_unicode_16
<3> expected but was
<5>

diff:
? 3
? 5
===============================================================================
.

Finished in 0.055723 seconds.

16 tests, 16 assertions, 11 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications
31.25% passed

287.13 tests/s, 287.13 assertions/s